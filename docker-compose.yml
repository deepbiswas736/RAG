version: '3.8'

services:
  # API Gateway and Service Registry
  traefik:
    image: traefik:v2.10
    ports:
      - "80:80"     # HTTP
      - "443:443"   # HTTPS (for future use)
      - "8080:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik:/etc/traefik
    command:
      - "--api.insecure=true"  # Enable dashboard without auth (remove in production)
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8080/ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  mongodb:
    image: mongodb/mongodb-atlas-local:latest # Revert to standard mongo image
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongo_app_data:/data/db # Changed volume name here
      - mongodb_config:/data/configdb # Added mapping for config volume
      - ./mongo-init:/docker-entrypoint-initdb.d # Add this mount for init scripts
    restart: always
    healthcheck:
      # Updated healthcheck to include authentication
      test: ["CMD", "mongosh", "mongodb://user:password@localhost:27017/rag_db?authSource=admin&directConnection=true", "--quiet", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - OLLAMA_NUM_GPU=32  # Optimized for 6GB VRAM - RTX 3050
      - CUDA_VISIBLE_DEVICES=0

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server --console-address ":9001" /data

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_CREATE_TOPICS: "rag_queries:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - //var/run/docker.sock:/var/run/docker.sock # Correct path for Windows
    depends_on:
      - zookeeper

  poppler:
    image: minidocks/poppler:latest
    volumes:
      - ./data/pdf_processing:/data
    command: tail -f /dev/null  # Keep container running
    healthcheck:
      test: ["CMD", "which", "pdftoppm"]
      interval: 10s
      timeout: 5s
      retries: 3

  tesseract:
    image: tesseractshadow/tesseract4re:latest
    volumes:
      - ./data/ocr_processing:/app/tesseractshadow
    command: tail -f /dev/null  # Keep container running
    healthcheck:
      test: ["CMD", "tesseract", "--version"]
      interval: 10s
      timeout: 5s
      retries: 3

  app:
    build: .
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=PathPrefix(`/api/rag`)"
      - "traefik.http.services.app.loadbalancer.server.port=8000"
      - "traefik.http.middlewares.app-stripprefix.stripprefix.prefixes=/api/rag"
      - "traefik.http.routers.app.middlewares=app-stripprefix"
    environment:
      - MONGODB_URL=mongodb://user:password@mongodb:27017/?authSource=admin&directConnection=true
      - MONGODB_DB_NAME=rag_db
      - MONGODB_VECTOR_INDEX_NAME=vector_index
      - VECTOR_DIMENSION=384
      - VECTOR_METRIC=cosine
      - SIMILARITY_THRESHOLD=0.7
      - MINIO_URL=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - OLLAMA_BASE_URL=http://ollama:11434
      - OLLAMA_MODEL=phi
      - POPPLER_SERVICE=poppler
      - TESSERACT_SERVICE=tesseract
      - BASE_PATH=/api/rag # Add base path for the service
    volumes:
      - .:/app
      - ./data/pdf_processing:/app/pdf_processing
      - ./data/ocr_processing:/app/ocr_processing
    depends_on:
      - mongodb
      - minio
      - kafka
      - ollama
      - poppler
      - tesseract
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3

  document-processor:
    build: ./document-processor
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.docproc.rule=PathPrefix(`/api/document-processor`)"
      - "traefik.http.services.docproc.loadbalancer.server.port=8080" # Assuming Go service runs on 8080
      - "traefik.http.middlewares.docproc-stripprefix.stripprefix.prefixes=/api/document-processor"
      - "traefik.http.routers.docproc.middlewares=docproc-stripprefix"
    volumes:
      - ./document-processor:/app
      - ./data/fallback_storage:/app/output
    depends_on:
      - traefik
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/detect"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongo_app_data: # Changed volume name here
  mongodb_config:
  minio_data:
  ollama_data:
  ocr_processing:
  fallback_storage: