services:
  # API Gateway and Service Registry
  traefik:
    image: traefik:v2.10
    ports:
      - "80:80"     # HTTP
      - "443:443"   # HTTPS (for future use)
      - "8080:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik:/etc/traefik
    command:
      - "--api.insecure=true"  # Enable dashboard without auth (remove in production)
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  mongodb:
    image: mongodb/mongodb-atlas-local:latest  # Atlas-local image for vector search
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=password
      - ATLAS_LOCAL_REPLICASET=rs0
      - GLIBC_TUNABLES=glibc.pthread.rseq=0  # Fix performance warning
    volumes:
      - mongo_app_data:/data/db 
      - mongodb_config:/data/configdb
      - ./mongo-init:/docker-entrypoint-initdb.d
      - ./keyfile:/keyfile
    command: mongod --replSet rs0 --bind_ip_all
    restart: always
    healthcheck:
      # Updated healthcheck to include authentication
      test: ["CMD", "mongosh", "mongodb://mongodb:27017/admin", "--eval", "rs.status()", "--quiet"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - OLLAMA_NUM_GPU=1
      - CUDA_VISIBLE_DEVICES=0
      - OLLAMA_GPU_LAYERS=33

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server --console-address ":9001" /data
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
  kafka:
    image: confluentinc/cp-kafka:7.6.1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper

  poppler:
    image: minidocks/poppler:latest
    volumes:
      - ./data/pdf_processing:/data
    command: tail -f /dev/null  # Keep container running
    healthcheck:
      test: ["CMD", "which", "pdftoppm"]
      interval: 10s
      timeout: 5s
      retries: 3

  tesseract:
    image: tesseractshadow/tesseract4re:latest
    volumes:
      - ./data/ocr_processing:/app/tesseractshadow
    command: tail -f /dev/null  # Keep container running
    healthcheck:
      test: ["CMD", "tesseract", "--version"]
      interval: 10s
      timeout: 5s
      retries: 3  # Kafka Utility Service
  kafka_utility:
    build:
      context: ./microservices/kafka_utility
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_SECURITY_PROTOCOL=PLAINTEXT
      - KAFKA_AUTO_CREATE_TOPICS=true
      - LOG_LEVEL=INFO
    depends_on:
      - kafka

  # Document Service
  document-service:
    build: 
      context: ./microservices/document_service # Changed from document-service
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.document-service.rule=PathPrefix(`/api/documents`)"
      - "traefik.http.services.document-service.loadbalancer.server.port=8000"
      - "traefik.http.middlewares.document-service-stripprefix.stripprefix.prefixes=/documents"
      - "traefik.http.routers.document-service.middlewares=document-service-stripprefix"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - MONGO_URI=mongodb://user:password@mongodb:27017/document_service?authSource=admin&replicaSet=rs0&retryWrites=true
      - DOCUMENT_PROCESSOR_URL=http://document-processor:8080
      - MINIO_URL=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - OCR_LANGUAGE=eng
      - PDF_DPI=300
    volumes:
      - ./data/document_storage:/app/data/storage
      - ./data/pdf_processing:/app/data/pdf_processing
      - ./data/ocr_processing:/app/data/ocr_processing
    depends_on:
      - kafka
      - mongodb
      - document-processor
      - minio
  # LLM Service with Metadata Extraction
  llm-service:
    build: 
       context: ./microservices # Correct context
       dockerfile: llm-service/Dockerfile # Path to Dockerfile within the context
    ports:
      - "8001:8002" # Host port 8001 mapped to container port 8002
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.llm-service.rule=PathPrefix(`/api/llm`)"
      - "traefik.http.services.llm-service.loadbalancer.server.port=8002" # Corrected: Traefik targets container port
      - "traefik.http.middlewares.llm-service-stripprefix.stripprefix.prefixes=/api/llm"
      - "traefik.http.routers.llm-service.middlewares=llm-service-stripprefix"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - MAX_CONCURRENT_METADATA_TASKS=5
      - OLLAMA_API_URL=http://ollama:11434
      - IN_DOCKER=true
      - LOG_LEVEL=DEBUG
      - OTEL_SERVICE_NAME=llm-service
      - OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://otel-collector:4318/v1/logs
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4318/v1/traces
      - OTEL_PYTHON_LOG_LEVEL=INFO
    depends_on:
      - kafka
      - ollama
      - otel-collector # Add dependency on otel-collector
    networks: # Add network configuration
      - default
      - rag_observability

# Removed duplicate query service definition
  document-processor:
    build: ./document-processor
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.docproc.rule=PathPrefix(`/api/document-processor`)"
      - "traefik.http.services.docproc.loadbalancer.server.port=8081" # Changed port
      - "traefik.http.middlewares.docproc-stripprefix.stripprefix.prefixes=/api/document-processor"
      - "traefik.http.routers.docproc.middlewares=docproc-stripprefix"
    volumes:
      - ./data/document_temp:/app/temp
    depends_on:
      - traefik
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/health"] # Changed port
  # Query Service needs to be fixed
  query-service:
    build: 
      context: ./microservices/query-service
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.query-service.rule=PathPrefix(`/api/query`)"
      - "traefik.http.services.query-service.loadbalancer.server.port=8003" # Changed port
      - "traefik.http.middlewares.query-service-stripprefix.stripprefix.prefixes=/api/query"
      - "traefik.http.routers.query-service.middlewares=query-service-stripprefix"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - MONGO_URI=mongodb://user:password@mongodb:27017/rag_db?authSource=admin&replicaSet=rs0&retryWrites=true
      - LLM_SERVICE_URL=http://llm-service:8002 
    depends_on:
      - kafka
      - mongodb
      - llm-service
      - tesseract
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003"] # Changed port
      interval: 30s
      timeout: 10s
      retries: 3
      
  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8180:8080"  # Changed to 8180 to avoid conflict with Traefik
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    depends_on:
      - kafka
      
  # UI for the application
  ui:
    build:
      context: ./ui
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ui.rule=PathPrefix(`/`)"
      - "traefik.http.services.ui.loadbalancer.server.port=3000"
    environment:
      - NEXT_PUBLIC_API_BASE_URL=/api
      - NEXT_PUBLIC_DOCUMENT_SERVICE_URL=/api/documents
      - NEXT_PUBLIC_QUERY_SERVICE_URL=/api/query
      - NEXT_PUBLIC_LLM_SERVICE_URL=/api/llm
    depends_on:
      - traefik
      - document-service
      - query-service
      - llm-service

volumes:
  mongo_app_data: # Changed volume name here
  mongodb_config:
  minio_data:
  ollama_data:
  ocr_processing:
  fallback_storage:

networks:
  default: # Define the default network if other services rely on it implicitly
    driver: bridge
  rag_observability:
    external: true
    name: rag_observability
